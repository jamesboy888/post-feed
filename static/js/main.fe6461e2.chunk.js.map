{"version":3,"sources":["Navbar.js","Input.js","Post.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","Input","addPost","useState","input","setInput","type","value","onChange","e","target","onKeyDown","tittle","key","Post","id","deletePost","onClick","src","App","posts","setPosts","updatedPost","filter","post","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NAEe,SAASA,IAIpB,OAEI,4BAAQC,UAAU,UAAlB,aCLO,SAASC,EAAT,GAA6B,IAAZC,EAAW,EAAXA,QAAW,EAEbC,mBAAS,IAFI,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAiBvC,OACI,yBAAKL,UAAU,SACX,yBAAKA,UAAU,gBAAf,eACA,2BACIA,UAAU,cACVM,KAAK,OACLC,MAAOH,EACPI,SApBI,SAACC,GACbJ,EAASI,EAAEC,OAAOH,QAoBVI,UAjBK,SAACF,GACd,IAAMG,EAASH,EAAEC,OAAOH,MAEX,UAAVE,EAAEI,KAAmBD,IACpBV,EAAQU,GACRP,EAAS,SCbN,SAASS,EAAT,GAA2C,IAA3BC,EAA0B,EAA1BA,GAAIH,EAAsB,EAAtBA,OAAQI,EAAc,EAAdA,WACvC,OACI,yBAAKhB,UAAU,QACX,4BAAQA,UAAU,eAAeiB,QAAS,kBAAKD,EAAWD,KAA1D,KACA,yBAAKf,UAAU,gBAAgBY,GAC/B,yBAAKZ,UAAU,YAAYkB,IAAG,iDAA4CH,MCFtF,IAAIA,EAAK,EAyBMI,MAvBf,WAAgB,IAAD,EACYhB,mBAAS,IADrB,mBACNiB,EADM,KACAC,EADA,KASb,SAASL,EAAWD,GAClB,IAAMO,EAAcF,EAAMG,QAAO,SAACC,GAAD,OAASA,EAAKT,IAAMA,KACrDM,EAASC,GAGX,OACE,yBAAKtB,UAAU,OACb,kBAACD,EAAD,MACA,kBAACE,EAAD,CAAOC,QAdX,SAAiBU,GAEfS,EAAS,CADO,CAACN,KAAGH,WACZ,mBAAaQ,KACrBL,GAAM,KAYHK,EAAMK,KAAI,SAACD,GAAD,OAAQ,kBAACV,EAAD,CAAMD,IAAKW,EAAKT,GAAIA,GAAIS,EAAKT,GAAIH,OAAQY,EAAKZ,OAAQI,WAAYA,SCdvEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fe6461e2.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Navbar() {\r\n\r\n    \r\n\r\n    return (\r\n\r\n        <header className=\"Navbar\">POST FEED</header>\r\n\r\n    )\r\n}\r\n","import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Input({ addPost }) {\r\n    \r\n    const [input, setInput] = useState('');\r\n\r\n    const onChange =(e)=>{\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    const onKeyDown =(e)=>{\r\n        const tittle = e.target.value;\r\n\r\n        if(e.key === 'Enter' && tittle){\r\n            addPost(tittle);\r\n            setInput('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"Input\"> \r\n            <div className=\"Input_header\">Create Post</div>\r\n            <input \r\n                className=\"Input_field\"\r\n                type=\"text\"\r\n                value={input}\r\n                onChange={onChange}\r\n                onKeyDown={onKeyDown}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nInput.propTypes={\r\n    addPost: PropTypes.func.isRequired\r\n};\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Post({ id, tittle, deletePost }) {\r\n    return (\r\n        <div className=\"Post\">\r\n            <button className=\"Post__delete\" onClick={()=> deletePost(id)}>X</button>\r\n            <div className=\"Post__tittle\">{tittle}</div>\r\n            <img className=\"Post__img\" src={`https://source.unsplash.com/random?sig=${id}`} />\r\n        </div>\r\n    )\r\n}\r\n\r\nPost.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    tittle: PropTypes.string.isRequired,\r\n    deletePost: PropTypes.func.isRequired\r\n}\r\n","import React,{useState} from 'react';\nimport './App.css';\nimport Navbar from \"./Navbar\";\nimport Input from './Input'\nimport Post from './Post';\n\nlet id = 1;\n\nfunction App() {\n  const [posts,setPosts] = useState([]);\n\n  function addPost(tittle){\n    const newPost = {id,tittle}\n    setPosts([newPost,...posts]);\n    id += 1;\n  }\n\n  function deletePost(id){\n    const updatedPost = posts.filter((post)=> post.id != id)\n    setPosts(updatedPost);\n  }\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Input addPost={addPost} />\n      {posts.map((post)=><Post key={post.id} id={post.id} tittle={post.tittle} deletePost={deletePost}/>)}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}